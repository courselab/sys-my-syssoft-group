#    SPDX-FileCopyrightText: 2024 reisvictor1 <reisvictor448@gmail.com>
#   
#    SPDX-License-Identifier: GPL-3.0-or-later


Answers:

Questão 1:

Resp: Por conta do PIE do linux, a execução faz com que os endereços da main sejam randômicos.
Dessa forma, há a prevenção para alguns tipos de ataques fazendo com que seja mais difícil
prever os endereços-alvo.

Questão 2:

Primeira execução do código original: 
    input: foo
    output: Access granted.

Segunda execução do código original:
    input: youshallnotpass
    output: Access granted

Por conta da flags e da estrutura do código, é permitido que se faça o input de strings 
maiores que o definido sem emitir erros e sem fazer a verificação.


Para que seja mais robusto, pode se usar a variável 'verified' como retorno da função 'strcmp'.
Assim a função previne que não seja aceito outros inputs além do que seja desejado

Com a flag '-fstack-protector', faz com que a memória seja protegida e não 
deixa que se aloque mais memória para o que foi definida para a varivel 'user_key'

Questao 3:

a) O parâmetro é passado para a função bar através da stack antes desta função
ser chamada. Isso ocorre por conta do padrão da arquitetura x86 e da ABI.

b) O valor da função bar é retornada através do registrador %eax. Isso também
é feito através do padrão da arquitetura x86 e da ABI.

c) As 2 primeiras instruções inicializam uma configuração para preparar a stack 
para as instruções da função e as 2 últimas voltam para sua configuração original. 
Elas organizam e gerenciam a stack para que sigam o padrão da arquitetura x86 e da ABI.

d) A instrução sub prepara um espaço para se alocar as variáveis locais da função na stack
e a instrução da main tem o intuito de alinhar de acordo com a arquitetura x86, ou seja, 
para receber instruções de 16 bytes (ou 128 bits). 

e) Ele colocou a instrução movbsl para converter o retorno de %eax para inteiro.
Declarando a função antes da execução da main permite que essa otimização seja feita.


Questão 4:

a) Os 3 programas tiveram o retorno "foo", porém na última é retornado o 'foo' da libp4.so


b) O tamanho da onde todos os objetos são copiados é o maior, enquanto a versao que usa a 
lib compartilhada dinamicamente é o menor. A maior diferença entre 
a lib linkada estaticamente e a dinâmica é que, na versao que linka
a static library, o conteudo do arquivo é incluido quando acontece o linking
na compilação. Dinamicamente, um ponteiro para o arquivo está sendo linkado é o que está
sendo incluido no executável, só quando você o executa que os arquivos linkados
dinamicamente são trazidos para a memória principal, não do executável que estava
no HD. As shared libraries diminuem o tamanho de código que é copiado..


c) O significado da segunda coluna é o tipo de símbolo que a instrução define.
Nos dois primeiros, a chamada do foo é listado como texto (código), no terceiro
é definido como indefinido. O bar, no primeiro é definido, mas como não
é chamado, no segundo e terceiro não é definido.


d) Nos dois primeiros, a shared library necessária é só o libc.so.6, enquanto no 
terceiro o libp4.so também é necessário no tempo de compilação. 
O linker realiza uma  quantidade mínima de trabalho em tempo de compilação, somente
gravando quais libs são necessárias para o executável em um indice. 
A  maior parte do trabalho é feita quando a aplicação é carregada em memória.
ou na execução do programa, adicionando os dados relevantes de cada lib no espaço 
de memória do processo.


e) Quando há instalação em outros hosts: nas libs estáticas, há a simplificação 
das dependências das libs, pois tem dependencias externas enquanto nas dinâmicas têm a
necessidade de garantir que as libs dinâmicas estejam no host.

Na ataualização de bibliotecas: nas libs estáticas, é necessário que todos os executáveis
que usam a lib sejam recompilados e redistribuídos, enquanto na lib dinâmica somente
a lib precisa ser atualizada.

A biblioteca é usada por muitos programas no mesmo host: 
Nas libs estáticas, cada programa vai copiar os objetos da lib, tendo mais uso do 
espaço do disco, enquanto nas dinâmicas, a lib é compartilhada entre os programas,
economizando espaço no disco e memória.


